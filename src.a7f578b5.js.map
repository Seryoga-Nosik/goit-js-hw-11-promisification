{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["task1Btn","document","querySelector","delay","ms","Promise","resolve","setTimeout","logger","time","console","log","onStart","then","clear","addEventListener","task2Btn","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","task3Btn","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAWC,SAASC,cAAc,cAElCC,EAAQC,GACL,IAAIC,QAAQC,IACjBC,WAAW,IAAMD,EAAQF,GAAKA,KAI5BI,EAASC,GAAQC,QAAQC,sBAAsBF,OAE/CG,EAAU,KACdT,EAAM,KAAMU,KAAKL,GACjBL,EAAM,KAAMU,KAAKL,GACjBL,EAAM,MAAMU,KAAKL,GACjBE,QAAQI,SAGVd,EAASe,iBAAiB,QAASH;;ACjBnC,MAAMI,EAAWf,SAASC,cAAc,cAElCe,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAExDpB,OAAAA,QAAQC,QAAQiB,IAGnBf,EAASe,GAAgBb,QAAQgB,MAAMH,GAEvCX,EAAU,KACdQ,EAAgBH,EAAO,SAASJ,KAAKL,GACrCY,EAAgBH,EAAO,OAAOJ,KAAKL,GACnCE,QAAQI,SAGVE,EAASD,iBAAiB,QAASH;;ACxBnC,MAAMe,EAAW1B,SAASC,cAAc,cAElC0B,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChBhC,MAAAA,EAAQyB,EAA0B,IAAK,KAEtC,OAAA,IAAIvB,QAAQ,CAACC,EAAS8B,KAC3B7B,WAAW,KACUwB,KAAKE,SAAW,IAGjC3B,EAAQ,CAAE+B,GAAIF,EAAYE,GAAI5B,KAAMN,IAGtCiC,EAAOD,EAAYE,KAClBlC,MAIDmC,EAAa,EAAGD,GAAAA,EAAI5B,KAAAA,MACxBC,QAAQC,mBAAmB0B,kBAAmB5B,QAG1C8B,EAAWF,IACf3B,QAAQ8B,qCAAqCH,+BAGzCzB,EAAU,KACdsB,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAM5B,KAAKyB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAO5B,KAAKyB,GAAYI,MAAMH,GAChE7B,QAAQI,SAGVa,EAASZ,iBAAiB,QAASH;;ACnCnC,aAHA,QAAA,oBACA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.a7f578b5.js","sourceRoot":"../src","sourcesContent":["const task1Btn = document.querySelector('.js-task-1');\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => resolve(ms), ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\nconst onStart = () => {\n  delay(2000).then(logger);\n  delay(1000).then(logger);\n  delay(1500).then(logger);\n  console.clear();\n};\n\ntask1Btn.addEventListener('click', onStart);\n","const task2Btn = document.querySelector('.js-task-2');\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n  return Promise.resolve(updatedUsers);\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\nconst onStart = () => {\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);\n  console.clear();\n};\n\ntask2Btn.addEventListener('click', onStart);\n","const task3Btn = document.querySelector('.js-task-3');\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      }\n\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nconst onStart = () => {\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n  console.clear();\n};\n\ntask3Btn.addEventListener('click', onStart);\n","import './sass/main.scss';\nimport './js/task-1';\nimport './js/task-2';\nimport './js/task-3';\n"]}